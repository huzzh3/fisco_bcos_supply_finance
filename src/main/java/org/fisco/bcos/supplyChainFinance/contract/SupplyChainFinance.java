package org.fisco.bcos.supplyChainFinance.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.Bool;
import org.fisco.bcos.sdk.codec.datatypes.Event;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class SupplyChainFinance extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b50611009600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff1660e01b8152600401620000b09062000313565b602060405180830381600087803b158015620000cb57600080fd5b505af1158015620000e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000106919062000221565b506040518060400160405280600a81526020017f636172436f6d70616e790000000000000000000000000000000000000000000081525060009080519060200190620001549291906200015b565b5062000394565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019e57805160ff1916838001178555620001cf565b82800160010185558215620001cf579182015b82811115620001ce578251825591602001919060010190620001b1565b5b509050620001de9190620001e2565b5090565b6200020791905b8082111562000203576000816000905550600101620001e9565b5090565b90565b6000815190506200021b816200037a565b92915050565b6000602082840312156200023457600080fd5b600062000244848285016200020a565b91505092915050565b60006200025c6007836200035f565b91507f636f6d70616e79000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006200029e6010836200035f565b91507f61737365745f72656365697661626c65000000000000000000000000000000006000830152602082019050919050565b6000620002e06007836200035f565b91507f61737365745f72000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060608201905081810360008301526200032e81620002d1565b9050818103602083015262000343816200024d565b9050818103604083015262000358816200028f565b9050919050565b600082825260208201905092915050565b6000819050919050565b620003858162000370565b81146200039157600080fd5b50565b6120fd80620003a46000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063cd485c281161005b578063cd485c2814610100578063e6c9f74714610130578063ea87152b14610160578063fcd7e3c1146101905761007d565b806329b8e16d1461008257806359abb934146100a05780639b80b050146100d0575b600080fd5b61008a6101c1565b6040516100979190611e1c565b60405180910390f35b6100ba60048036038101906100b591906119f5565b61025f565b6040516100c79190611e01565b60405180910390f35b6100ea60048036038101906100e59190611976565b610347565b6040516100f79190611e01565b60405180910390f35b61011a60048036038101906101159190611976565b6108aa565b6040516101279190611e01565b60405180910390f35b61014a6004803603810190610145919061190a565b610c21565b6040516101579190611e01565b60405180910390f35b61017a600480360381019061017591906119f5565b610f62565b6040516101879190611e01565b60405180910390f35b6101aa60048036038101906101a591906118c9565b6111ed565b6040516101b8929190611dd8565b60405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102575780601f1061022c57610100808354040283529160200191610257565b820191906000526020600020905b81548152906001019060200180831161023a57829003601f168201915b505050505081565b60008060009050600060019050600080905061027a866111ed565b80925081935050506000151582151514156102b7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92506102ed565b848110156102e7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe92506102ec565b600092505b5b84866040516102fc9190611dc1565b60405180910390207f4f4be4dee58d9880030c57df7d6a0506405e92ec763ac0fe502b44e20338dd00856040516103339190611e01565b60405180910390a382935050505092915050565b600080600090506000600190506000600190506000809050600080905061036d896111ed565b809350819550505061037e886111ed565b809250819450505060006040516103959190611daa565b6040518091039020898051906020012014156103d3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450610837565b600015158415151415610408577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9450610836565b60001515831515141561043d577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9450610835565b8682101561046d577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9450610834565b80878201101561049f577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9450610833565b60606104ac88840361130d565b90506104b66115f8565b60405180604001604052806040518060400160405280601081526020017f61737365745f72656365697661626c650000000000000000000000000000000081525081526020018381525090506060600167ffffffffffffffff8111801561051c57600080fd5b5060405190808252806020026020018201604052801561055657816020015b6105436115f8565b81526020019060019003908161053b5790505b509050818160008151811061056757fe5b602002602001018190525061057a611612565b60405180602001604052808381525090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663649a84288f846040518363ffffffff1660e01b81526004016105ea929190611e93565b602060405180830381600087803b15801561060457600080fd5b505af1158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c91906118a0565b90506001811461066e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa995061082d565b6106798c870161130d565b945060405180604001604052806040518060400160405280601081526020017f61737365745f72656365697661626c65000000000000000000000000000000008152508152602001868152509350600167ffffffffffffffff811180156106df57600080fd5b5060405190808252806020026020018201604052801561071957816020015b6107066115f8565b8152602001906001900390816106fe5790505b509250838360008151811061072a57fe5b60200260200101819052506040518060200160405280848152509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663649a84288e846040518363ffffffff1660e01b81526004016107a3929190611e93565b602060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f591906118a0565b905060018114610827577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa995061082c565b600099505b5b50505050505b5b5b5b5b86886040516108469190611dc1565b60405180910390208a60405161085c9190611dc1565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd886040516108939190611e01565b60405180910390a484955050505050509392505050565b60008060009050600060019050600060019050600080905060008090506108d0896111ed565b80935081955050506108e1886111ed565b809250819450505060006040516108f89190611daa565b6040518091039020898051906020012014610935577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450610bae565b60001515841515141561096a577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9450610bad565b60001515831515141561099f577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9450610bac565b8087820110156109d1577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9450610bab565b60606109de88830161130d565b90506109e86115f8565b60405180604001604052806040518060400160405280601081526020017f61737365745f72656365697661626c650000000000000000000000000000000081525081526020018381525090506060600167ffffffffffffffff81118015610a4e57600080fd5b50604051908082528060200260200182016040528015610a8857816020015b610a756115f8565b815260200190600190039081610a6d5790505b5090508181600081518110610a9957fe5b6020026020010181905250610aac611612565b60405180602001604052808381525090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663649a84288e846040518363ffffffff1660e01b8152600401610b1c929190611e93565b602060405180830381600087803b158015610b3657600080fd5b505af1158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e91906118a0565b905060018114610ba0577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9950610ba5565b600099505b50505050505b5b5b5b8688604051610bbd9190611dc1565b60405180910390208a604051610bd39190611dc1565b60405180910390207f7ae2de05795fa9efed7045eb641b0bd43b4f3379be2d45bbe1e780aa0f5d9f3f88604051610c0a9190611e01565b60405180910390a484955050505050509392505050565b6000806000905060006001905060006001905060008090506000809050610c47886111ed565b8093508195505050610c58876111ed565b809250","","20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b6000611c94600783611ff3565b91507f61737365745f72000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000611cd4602c83611ff3565b91507f4d6f7265207468616e206f6e6520646563696d616c20656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b60006020830160008301518482036000860152611d4a8282611a5d565b9150508091505092915050565b60006040830160008301518482036000860152611d748282611b7e565b91505060208301518482036020860152611d8e8282611b7e565b9150508091505092915050565b611da481612025565b82525050565b6000611db68284611ae1565b915081905092915050565b6000611dcd8284611bf0565b915081905092915050565b6000604082019050611ded6000830185611ad2565b611dfa6020830184611d9b565b9392505050565b6000602082019050611e166000830184611b6f565b92915050565b60006020820190508181036000830152611e368184611bb7565b905092915050565b60006020820190508181036000830152611e5781611c21565b9050919050565b60006040820190508181036000830152611e7781611c87565b90508181036020830152611e8b8184611bb7565b905092915050565b60006060820190508181036000830152611eac81611c87565b90508181036020830152611ec08185611bb7565b90508181036040830152611ed48184611d2d565b90509392505050565b60006020820190508181036000830152611ef681611cc7565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715611f2057600080fd5b8060405250919050565b600067ffffffffffffffff821115611f4157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611f6957600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561205c578082015181840152602081019050612041565b8381111561206b576000848401525b50505050565b6000601f19601f8301169050919050565b61208b8161200f565b811461209657600080fd5b50565b6120a28161201b565b81146120ad57600080fd5b50565b6120b981612025565b81146120c457600080fd5b5056fea26469706673582212203226a97da5c7edcd31072d1714ea220987f61722d6c63f0a97cc78593da4506664736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","50919050565b6000611c6e602c83611ff3565b91507f4e6f6e2d6e756d6572616c2063686172616374657220656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b6000611cd4602c83611ff3565b91507f4d6f7265207468616e206f6e6520646563696d616c20656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b60006020830160008301518482036000860152611d4a8282611a5d565b9150508091505092915050565b60006040830160008301518482036000860152611d748282611b7e565b91505060208301518482036020860152611d8e8282611b7e565b9150508091505092915050565b611da481612025565b82525050565b6000611db68284611ae1565b915081905092915050565b6000611dcd8284611bf0565b915081905092915050565b6000604082019050611ded6000830185611ad2565b611dfa6020830184611d9b565b9392505050565b6000602082019050611e166000830184611b6f565b92915050565b60006020820190508181036000830152611e368184611bb7565b905092915050565b60006040820190508181036000830152611e5781611c21565b90508181036020830152611e6b8184611bb7565b905092915050565b60006060820190508181036000830152611e8c81611c21565b90508181036020830152611ea08185611bb7565b90508181036040830152611eb48184611d2d565b90509392505050565b60006020820190508181036000830152611ed681611c61565b9050919050565b60006020820190508181036000830152611ef681611cc7565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715611f2057600080fd5b8060405250919050565b600067ffffffffffffffff821115611f4157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611f6957600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561205c578082015181840152602081019050612041565b8381111561206b576000848401525b50505050565b6000601f19601f8301169050919050565b61208b8161200f565b811461209657600080fd5b50565b6120a28161201b565b81146120ad57600080fd5b50565b6120b981612025565b81146120c457600080fd5b5056fea2646970667358221220247331d4f9d4e4ec9ec132af16900d3df2128609561b0efe49586ea18765c51c64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fromCompany\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetReceivableTo\",\"type\":\"uint256\"}],\"name\":\"FinancingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetReceivable\",\"type\":\"uint256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fromCompany\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"toCompany\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetReceivableTo\",\"type\":\"uint256\"}],\"name\":\"SendEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fromCompany\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"toCompany\",\"type\":\"string\"}],\"name\":\"SettleEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fromCompany\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"toCompany\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetReceivableTo\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"coreCompanyName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromCompany\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assetReceivableTo\",\"type\":\"uint256\"}],\"name\":\"financing\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assetReceivable\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"company\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromCompany\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toCompany\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assetReceivableTo\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromCompany\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toCompany\",\"type\":\"string\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromCompany\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toCompany\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assetReceivableTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_CORECOMPANYNAME = "coreCompanyName";

    public static final String FUNC_FINANCING = "financing";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_SEND = "send";

    public static final String FUNC_SETTLE = "settle";

    public static final String FUNC_TRANSFER = "transfer";

    public static final Event FINANCINGEVENT_EVENT = new Event("FinancingEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SENDEVENT_EVENT = new Event("SendEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SETTLEEVENT_EVENT = new Event("SettleEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected SupplyChainFinance(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<FinancingEventEventResponse> getFinancingEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FINANCINGEVENT_EVENT, transactionReceipt);
        ArrayList<FinancingEventEventResponse> responses = new ArrayList<FinancingEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FinancingEventEventResponse typedResponse = new FinancingEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromCompany = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.assetReceivableTo = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.company = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.assetReceivable = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SendEventEventResponse> getSendEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SENDEVENT_EVENT, transactionReceipt);
        ArrayList<SendEventEventResponse> responses = new ArrayList<SendEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SendEventEventResponse typedResponse = new SendEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromCompany = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.toCompany = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.assetReceivableTo = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SettleEventEventResponse> getSettleEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETTLEEVENT_EVENT, transactionReceipt);
        ArrayList<SettleEventEventResponse> responses = new ArrayList<SettleEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SettleEventEventResponse typedResponse = new SettleEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromCompany = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.toCompany = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TransferEventEventResponse> getTransferEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromCompany = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.toCompany = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.assetReceivableTo = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public String coreCompanyName() throws ContractException {
        final Function function = new Function(FUNC_CORECOMPANYNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt financing(String fromCompany, BigInteger assetReceivableTo) {
        final Function function = new Function(
                FUNC_FINANCING, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void financing(String fromCompany, BigInteger assetReceivableTo,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FINANCING, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFinancing(String fromCompany,
            BigInteger assetReceivableTo) {
        final Function function = new Function(
                FUNC_FINANCING, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFinancingInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FINANCING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getFinancingOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FINANCING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt register(String company, BigInteger assetReceivable) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(company),
                new Uint256(assetReceivable)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String company, BigInteger assetReceivable, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(company),
                new Uint256(assetReceivable)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String company, BigInteger assetReceivable) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(company),
                new Uint256(assetReceivable)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<Boolean, BigInteger> select(String company) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(company)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, BigInteger>(
                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt send(String fromCompany, String toCompany,
            BigInteger assetReceivableTo) {
        final Function function = new Function(
                FUNC_SEND, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void send(String fromCompany, String toCompany, BigInteger assetReceivableTo,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SEND, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSend(String fromCompany, String toCompany,
            BigInteger assetReceivableTo) {
        final Function function = new Function(
                FUNC_SEND, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSendInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SEND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getSendOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SEND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt settle(String fromCompany, String toCompany) {
        final Function function = new Function(
                FUNC_SETTLE, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void settle(String fromCompany, String toCompany, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTLE, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSettle(String fromCompany, String toCompany) {
        final Function function = new Function(
                FUNC_SETTLE, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSettleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getSettleOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETTLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt transfer(String fromCompany, String toCompany,
            BigInteger assetReceivableTo) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String fromCompany, String toCompany, BigInteger assetReceivableTo,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String fromCompany, String toCompany,
            BigInteger assetReceivableTo) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(fromCompany),
                new Utf8String(toCompany),
                new Uint256(assetReceivableTo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static SupplyChainFinance load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new SupplyChainFinance(contractAddress, client, credential);
    }

    public static SupplyChainFinance deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(SupplyChainFinance.class, client, credential, getBinary(client.getCryptoSuite()), null, null, null);
    }

    public static class FinancingEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] fromCompany;

        public BigInteger assetReceivableTo;

        public BigInteger ret;
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] company;

        public BigInteger assetReceivable;

        public BigInteger ret;
    }

    public static class SendEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] fromCompany;

        public byte[] toCompany;

        public BigInteger assetReceivableTo;

        public BigInteger ret;
    }

    public static class SettleEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] fromCompany;

        public byte[] toCompany;

        public BigInteger ret;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] fromCompany;

        public byte[] toCompany;

        public BigInteger assetReceivableTo;

        public BigInteger ret;
    }
}
